#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
	tapping-term-ms = <300>;
	flavor = "hold-preferred";
};

/ {
	behaviors {
		shift_sym: shift_sym {
			compatible = "zmk,behavior-mod-morph";
			label = "SHIFT_SYM";
			bindings = <&lt 1 ENTER>, <&to 1>;

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		shift_nav: shift_nav {
			compatible = "zmk,behavior-mod-morph";
			label = "SHIFT_NAV";
			bindings = <&lt 2 SPACE>, <&to 2>;

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		bc_del: bc_del {
			compatible = "zmk,behavior-mod-morph";
			label = "BC_DEL";
			bindings = <&kp BACKSPACE>, <&kp DELETE>;

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		lpar_lt: lpar_lt {
			compatible = "zmk,behavior-mod-morph";
			label = "LPAR_LT";
			bindings = <&kp LPAR>, <&kp LT>;

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		rpar_gt: rpar_gt {
			compatible = "zmk,behavior-mod-morph";
			label = "RPAR_GT";
			bindings = <&kp RPAR>, <&kp GT>;

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

	};

	combos {
		compatible = "zmk,combos";
		excl { bindings = <&kp EXCL>; key-positions = <1 13>; };
		at { bindings = <&kp AT>; key-positions = <2 14>; };
		pound { bindings = <&kp POUND>; key-positions = <3 15>; };
		dollar { bindings = <&kp DOLLAR>; key-positions = <4 16>; };
		percent { bindings = <&kp PERCENT>; key-positions = <5 17>; };
		caret { bindings = <&kp CARET>; key-positions = <6 18>; };
		plus { bindings = <&kp PLUS>; key-positions = <7 19>; };
		astrk { bindings = <&kp ASTRK>; key-positions = <8 20>; };
		amps { bindings = <&kp AMPS>; key-positions = <9 21>; };
		lpar { bindings = <&lpar_lt>; key-positions = <19 20>; };
		rpar { bindings = <&rpar_gt>; key-positions = <20 21>; };
		slsh { bindings = <&kp SLASH>; key-positions = <20 36>; };
		lbrc {bindings = <&kp LEFT_BRACKET>; key-positions = <35 36>; };
		rbrc { bindings = <&kp RIGHT_BRACKET>; key-positions = <36 37>; };
		dash { bindings = <&kp MINUS>; key-positions = <19 35>; };
		equal { bindings = <&kp EQUAL>; key-positions = <16 28>; };
		bslh { bindings = <&kp BSLH>; key-positions = <15 27>; };
		pipe { bindings = <&kp PIPE>; key-positions = <21 37>; };
	};

	keymap {
		compatible = "zmk,keymap";

		alpha {
			bindings = <
&kp ESC    &kp Q  &kp W  &kp E      &kp R     &kp T                                                                     &kp Y          &kp U          &kp I       &kp O    &kp P     &bc_del
&kp TAB    &kp A  &kp S  &kp D      &kp F     &kp G                                                                     &kp H          &kp J          &kp K       &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C      &kp V     &kp B     &kp K_FORWARD    &kp LSHFT   &mo 3       &kp K_BACK             &kp N          &kp M          &kp COMMA   &kp DOT  &kp FSLH  &kp BACKSLASH
						 &kp LCTRL  &kp LALT  &kp LGUI  &mt LCTRL SPACE  &shift_nav  &shift_sym  &mt RIGHT_SHIFT ENTER  &kp RIGHT_GUI  &kp RIGHT_ALT  &kp K_MENU
			>;
		};

		sym {
			bindings = <
&kp GRAVE  &kp N1         &kp N2       &kp N3         &kp N4      &kp N5                                                             &kp N6             &kp N7          &kp N8        &kp N9                &kp N0                 &kp EQUAL
&kp BSPC   &kp EXCL       &kp AT_SIGN  &kp HASH       &kp DOLLAR  &kp PERCENT                                                        &kp CARET          &kp AMPERSAND   &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PLUS
&kp PIPE   &kp BACKSLASH  &kp COLON    &kp SEMICOLON  &kp MINUS   &kp LEFT_BRACKET  &kp LEFT_BRACE  &trans  &trans  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp UNDERSCORE  &kp COMMA     &kp PERIOD            &kp SLASH              &kp QUESTION
									   &trans         &trans      &trans            &trans          &trans  &to 0   &trans           &trans             &trans          &trans
			>;
		};

		nav {
			bindings = <
&trans            &trans            &trans  &trans  &trans  &trans                                  &kp PG_UP      &kp HOME    &kp UP_ARROW    &kp END     &kp C_VOLUME_UP  &kp DELETE
&kp C_PLAY_PAUSE  &kp K_PLAY_PAUSE  &trans  &trans  &trans  &trans                                  &kp PAGE_DOWN  &kp LEFT    &kp DOWN        &kp RIGHT   &kp C_VOL_DN     &kp INSERT
&trans            &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp C_PLAY     &kp C_STOP  &kp C_PREVIOUS  &kp C_NEXT  &kp C_MUTE       &kp PRINTSCREEN
											&trans  &trans  &trans  &trans  &to 0   &trans  &trans  &trans         &trans      &trans
			>;
		};

		funct {
			bindings = <
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans                                  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans                                  &trans        &trans        &trans        &trans        &trans        &trans
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans  &trans  &trans  &trans  &tog 4  &trans        &trans        &trans        &trans        &trans        &trans
						 &trans   &trans   &trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans
			>;
		};

		game {
			bindings = <
&trans  &trans  &kp Q  &kp W   &kp E   &kp R                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp A  &kp S   &kp D   &kp F                                   &trans  &trans  &trans  &trans  &trans  &trans
&tog 0  &trans  &kp Z  &kp X   &kp C   &kp V   &kp G   &kp I   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &tog 0
					   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
			>;
		};
	};
};
