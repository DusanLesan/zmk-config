#define ALP 0
#define NUM 1
#define NAV 2
#define FUN 3

#define A_TOP_ROW_L &kp Q &kp W &kp E &kp R &kp T
#define A_TOP_ROW_R &kp Y &kp U &kp I &kp O &kp P
#define A_HOME_ROW_L &hml LGUI A &hml LALT S &hml LSHFT D &hml LCTRL F &hml LGUI G
#define A_HOME_ROW_R &kp H &hmr RCTRL J &hmr RSHFT K &hmr RALT L &hmr RGUI SQT
#define A_BOTTOM_ROW_L &kp Z &kp X &kp C &kp V &kp B
#define A_BOTTOM_ROW_R &kp N &kp M &comma_semi &dot_colon &kp FSLH
#define A_THUMB_ROW &kp BSPC &lt NAV SPACE &lt FUN RET &lt_num NUM 0

#define N_TOP_ROW_L &trans &kp N7 &kp N8 &kp N9 &trans
#define N_TOP_ROW_R &trans &trans &trans &trans &trans
#define N_HOME_ROW_L &trans &kp N4 &kp N5 &kp N6 &trans
#define N_HOME_ROW_R &trans &trans &trans &trans &trans
#define N_BOTTOM_ROW_L &kp N0 &kp N1 &kp N2 &kp N3 &trans
#define N_BOTTOM_ROW_R &trans &trans &trans &trans &trans
#define N_THUMB_ROW &trans &trans &trans &trans

#define M_TOP_ROW_L &trans &trans &trans &trans &trans
#define M_TOP_ROW_R &kp PG_UP &kp HOME &kp UP &kp END &kp DEL
#define M_HOME_ROW_L &trans &trans &trans &trans &trans
#define M_HOME_ROW_R &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp INS
#define M_BOTTOM_ROW_L &trans &trans &trans &trans &trans
#define M_BOTTOM_ROW_R &trans &trans &trans &trans &kp PSCRN
#define M_THUMB_ROW &trans &trans &trans &trans

#define F_TOP_ROW_L &kp F12 &kp F7 &kp F8 &kp F9 &trans
#define F_TOP_ROW_R &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#define F_HOME_ROW_L &kp F11 &kp F4 &kp F5 &kp F6 &trans
#define F_HOME_ROW_R &trans &trans &trans &trans &trans
#define F_BOTTOM_ROW_L &kp F10 &kp F1 &kp F2 &kp F3 &trans
#define F_BOTTOM_ROW_R &kp C_PLAY &kp C_STOP &kp C_PREV &kp C_NEXT &kp C_MUTE
#define F_THUMB_ROW &trans &trans &trans &trans

#define MOD_MORPH(bind1, bind2) \
	compatible = "zmk,behavior-mod-morph"; \
	#binding-cells = <0>; \
	mods = <(MOD_LSFT|MOD_RSFT)>; \
	bindings = <bind1>, <bind2>;

#define HOLD_TAP(tap, hold) \
	compatible = "zmk,behavior-hold-tap"; \
	flavor = "balanced"; \
	bindings = <tap>, <hold>; \
	#binding-cells = <2>; \
	tapping-term-ms = <280>;

#define HOME_ROW \
	hold-trigger-on-release; \
	quick-tap-ms = <175>; \
	require-prior-idle-ms = <250>; \

#define COMBO(name, bind, keypos) \
	combo_ ## name { \
		timeout-ms = <50>; \
		bindings = <bind>; \
		key-positions = <keypos>; \
	};

&num_word {
	continue-list = <BSPC DEL DOT COMMA>;
};

&lt {
	tapping-term-ms = <300>;
	flavor = "hold-preferred";
};

/ {
	behaviors {
		bc_del: bc_del { label = "BC_DEL"; MOD_MORPH(&kp BSPC, &kp DEL) };
		lpar_lt: lpar_lt { label = "LPAR_LT"; MOD_MORPH(&kp LPAR, &kp LT) };
		rpar_gt: rpar_gt { label = "RPAR_GT"; MOD_MORPH(&kp RPAR, &kp GT) };
		comma_semi: comma_semi { label = "COMMA_SEMI"; MOD_MORPH(&kp COMMA, &kp SEMI) };
		dot_colon: dot_colon { label = "DOT_COLON"; MOD_MORPH(&kp DOT, &kp COLON) };

		td_num: td_num {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&num_word NUM>, <&sl NUM>;
		};

		lt_num: lt_num {
			label = "LT_NUM";
			HOLD_TAP(&mo, &td_num)
		};

		l_tap: l_tap {
			label = "L_TAP";
			HOLD_TAP(&mo, &to)
		};

		hml: hml { label = "HML"; hold-trigger-key-positions = <KEYS_R THUMBS>; HOME_ROW HOLD_TAP(&kp, &kp) };
		hmr: hmr { label = "HMR"; hold-trigger-key-positions = <KEYS_L THUMBS>; HOME_ROW HOLD_TAP(&kp, &kp) };
		hr_combo_lpar: hr_combo_lpar { hold-trigger-key-positions = <KEYS_L THUMBS>; HOME_ROW HOLD_TAP(&kp, &lpar_lt) };
		hr_combo_rpar: hr_combo_rpar { hold-trigger-key-positions = <KEYS_L THUMBS>; HOME_ROW HOLD_TAP(&kp, &rpar_gt) };
	};

	combos {
		compatible = "zmk,combos";
		COMBO(excl, &kp EXCL, LT4 LM4)
		COMBO(at, &kp AT, LT3 LM3)
		COMBO(hash, &kp HASH, LT2 LM2)
		COMBO(dllr, &kp DLLR, LT1 LM1)
		COMBO(prcnt, &kp PRCNT, LT0 LM0)
		COMBO(caret, &kp CARET, RT0 RM0)
		COMBO(plus, &kp PLUS, RT1 RM1)
		COMBO(astrk, &kp ASTRK, RT2 RM2)
		COMBO(amps, &kp AMPS, RT3 RM3)
		COMBO(fslh, &kp FSLH, RM2 RB2)
		COMBO(pipe, &kp PIPE, RM3 RB3)
		COMBO(lbkt, &kp LBKT, RB1 RB2)
		COMBO(rbkt, &kp RBKT, RB2 RB3)
		COMBO(dash, &kp MINUS, RM1 RB1)
		COMBO(equal, &kp EQUAL, LM1 LB1)
		COMBO(bslh, &kp BSLH, LM2 LB2)
		COMBO(tild, &kp GRAVE, LM4 LB4)
		COMBO(tab, &kp TAB, LT1 LT2)
		COMBO(esc, &kp ESC, LT2 LT3)
		COMBO(bspc, &kp BSPC, RT1 RT2)
		COMBO(del, &kp DEL, RT2 RT3)
		COMBO(lpar, &hr_combo_lpar RS(RCTRL) 0, RM1 RM2)
		COMBO(rpar, &hr_combo_rpar RS(RALT) 0, RM2 RM3)
	};
};
